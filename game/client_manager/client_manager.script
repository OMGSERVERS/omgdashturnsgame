local leaving_screen = require("screens.leaving_screen.leaving_screen")
local joining_screen = require("screens.joining_screen.joining_screen")
local client_manager = require("game.client_manager.client_manager")
local screen_factory = require("game.screen_factory.screen_factory")
local match_screen = require("screens.match_screen.match_screen")
local client_state = require("game.client_manager.client_state")
local auth_screen = require("screens.auth_screen.auth_screen")
local omgplayer = require("omgservers.omgplayer.omgplayer")
local server_messages = require("common.server_messages")
local game_messages = require("common.game_messages")

local function send_command(self, message)
	self.omginstance:send_service_message(message)
end

local function send_message(self, message)
	self.omginstance:send_text_message(message)
end

local function start(self)
	self.started_at = socket.gettime()
	print(os.date() .. " [CLIENT_MANAGER] Game started at " .. os.date())

	client_state:change_game_state(client_state.IN_AUTH)

	-- Show auth screen
	screen_factory:create_auth_screen()
end

local function sign_in(self, user_id, password)
	print(os.date() .. " [CLIENT_MANAGER] Signing in, user_id=" .. user_id)
	self.omginstance:sign_in(user_id, password)
end

local function join(self, nickname)
	print(os.date() .. " [CLIENT_MANAGER] Joining was requested at " .. os.date() .. ", nickname=" .. nickname)

	client_state:change_nickname(nickname)

	-- Show joining screen
	screen_factory:create_joining_screen()
end

local function set_profile(self, profile)
	print(os.date() .. " [CLIENT_MANAGER] Profile was received at " .. os.date())
	client_state:set_profile(profile)

	if client_state.game_state == client_state.GETTING_PROFILE then
		-- Show lobby screen
		screen_factory:create_lobby_screen(client_state.profile)
	end
end

local function set_state(self, step, settings, dangling_players, spawned_players)
	print(os.date() .. " [CLIENT_MANAGER] State was received at " .. os.date() .. ", step=" .. step)

	if client_state.game_state == client_state.GETTING_STATE then
		-- Show match screen
		screen_factory:create_match_screen(settings, dangling_players, spawned_players)
	end
end

local function spawn(self)
	local game_message = game_messages:request_spawn()
	send_message(self, json.encode(game_message))
end

local function move(self, x, y)
	local game_message = game_messages:move_player(x, y)
	send_message(self, json.encode(game_message))
end

local function apply_events(self, events)
	match_screen:apply_events(self.screen_collection_id, events)
end

local function set_spawn_countdown(self, time_to_spawn)
	match_screen:set_spawn_countdown(self.screen_collection_id, time_to_spawn)
end

local function leave(self)
	print(os.date() .. " [CLIENT_MANAGER] Leaving was requested at " .. os.date())

	-- Show leaving screen
	screen_factory:create_leaving_screen()
end

local function reset(self)
	print(os.date() .. " [CLIENT_MANAGER] Reset was requested at " .. os.date())
	client_state:reset()
	start(self)
end


local function signed_up(self, user_id, password)
	print(os.date() .. " [CLIENT_MANAGER] Signed up, user_id=" .. user_id)

	auth_screen:set_state(self.screen_collection_id, "Signing in")

	sign_in(self, user_id, password)
end

local function signed_in(self, client_id)
	print(os.date() .. " [CLIENT_MANAGER] Signed in, client_id=" .. client_id)
	client_state:set_client_id(client_id)
end

local function greeted(self, version_id, version_created)
	print(os.date() .. " [CLIENT_MANAGER] User greeted at " .. os.date() .. ", version_id=" .. version_id .. ", version_created=" .. version_created)

	auth_screen:set_state(self.screen_collection_id, "Getting profile")

	-- Request profile
	local game_message = game_messages:request_profile()
	send_command(self, json.encode(game_message))

	client_state:change_game_state(client_state.GETTING_PROFILE)
end

local function assigned(self, runtime_qualifier, runtime_id)
	print(os.date() .. " [CLIENT] Assigned, runtime_qualifier=" .. runtime_qualifier .. ", runtime_id=" .. runtime_id)
	if runtime_qualifier == omgplayer.constants.LOBBY then
		print(os.date() .. " [CLIENT_MANAGER] Lobby was assigned at " .. os.date())
		-- Show lobby screen
		screen_factory:create_lobby_screen(client_state.profile)
		
	elseif runtime_qualifier == omgplayer.constants.MATCH then
		print(os.date() .. " [CLIENT_MANAGER] Match was assigned at " .. os.date())
	else
		error("[CLIENT_MANAGER] Unknown runtime qualifier was received, runtime_qualifier=" .. tostring(runtime_qualifier))
	end
end

local function message_received(self, message)
	local message_qualifier = message.qualifier
	if message_qualifier == server_messages.SET_PROFILE then
		local profile = message.profile
		set_profile(self, profile)

	elseif message_qualifier == server_messages.SET_STATE then
		local step = message.step
		local settings = message.settings
		local dangling_players = message.dangling_players
		local spawned_players = message.spawned_players
		set_state(self, step, settings, dangling_players, spawned_players)

	elseif message_qualifier == server_messages.APPLY_EVENTS then
		local events = message.events
		apply_events(self, events)

	elseif message_qualifier == server_messages.SET_SPAWN_COUNTDOWN then
		local time_to_spawn = message.time_to_spawn
		set_spawn_countdown(self, time_to_spawn)

	else
		error("[CLIENT_MANAGER] Unknown message qualifier was received, message_qualifier=" .. tostring(message_qualifier))
	end
end

local function connection_dispatched(self)
	print(os.date() .. " [CLIENT_MANAGER] Connection was upgraded at " .. os.date())

	client_state:change_game_state(client_state.GETTING_STATE)

	-- Request match state
	local game_message = game_messages:request_state()
	send_message(self, json.encode(game_message))
end

local function failed(self, reason)
	print(os.date() .. " [CLIENT_MANAGER] Game failed at " .. os.date() .. ", reason=" ..reason)
	client_state:change_game_state(client_state.GAME_FAILED)

	-- Show ops screen
	screen_factory:create_ops_screen(reason)
end

local function handle_client_event(self, event)
	print(os.date() .. " [CLIENT] Client event was received, event=" .. json.encode(event))

	local event_qualifier = event.qualifier
	local event_body = event.body

	if event_qualifier == omgplayer.constants.SIGNED_UP then
		local user_id = event_body.user_id 
		local password = event_body.password
		signed_up(self, user_id, password)

	elseif event_qualifier == omgplayer.constants.SIGNED_IN then
		local client_id = event_body.client_id
		signed_in(self, client_id)

	elseif event_qualifier == omgplayer.constants.GREETED then
		local version_id = event_body.version_id
		local version_created = event_body.version_created
		greeted(self, version_id, version_created)

	elseif event_qualifier == omgplayer.constants.ASSIGNED then
		local runtime_qualifier = event_body.runtime_qualifier
		local runtime_id = event_body.runtime_id
		assigned(self, runtime_qualifier, runtime_id)

	elseif event_qualifier == omgplayer.constants.MESSAGE_RECEIVED then
		local decoded_message = json.decode(event_body.message)
		message_received(self, decoded_message)

	elseif event_qualifier == omgplayer.constants.CONNECTION_DISPATCHED then
		connection_dispatched(self)

	elseif event_qualifier == omgplayer.constants.PLAYER_FAILED then
		local reason = event_body.reason
		failed(self, reason)

	end
end

local function auth_screen_created(self, collection_id)
	print(os.date() .. " [CLIENT_MANAGER] Auth screen was created at " .. os.date())
	
	self.screen_collection_id = collection_id

	auth_screen:set_state(self.screen_collection_id, "Signing up")

	if self.omginstance then
		print(os.date() .. " [CLIENT] Resetting already created client")

		self.omginstance:reset()
	else
		print(os.date() .. " [CLIENT] Creating a new client")

		if sys.get_engine_info().is_debug then
			local configuration = require("game.server_connections.local_server")
			print(os.date() .. " [CLIENT] Using local server configuration, " .. json.encode(configuration))

			local options = {
				tenant = configuration.tenant,
				project = configuration.project,
				stage = configuration.stage,
				event_handler = function(event) handle_client_event(self, event) end,
				service_url = configuration.url,
				debug_logging = true,
				trace_logging = false,
			}

			local omginstance = omgplayer:create()
			self.omginstance = omginstance

			omginstance:init(options)
		else
			error("[CLIENT] Only local server is supported")
		end
	end

	self.omginstance:ping()
	self.omginstance:sign_up()
end

local function lobby_screen_created(self, collection_id)
	print(os.date() .. " [CLIENT_MANAGER] Lobby screen was created at " .. os.date())
	
	self.screen_collection_id = collection_id
	client_state:change_game_state(client_state.IN_LOBBY)
end

local function joining_screen_created(self, collection_id)
	print(os.date() .. " [CLIENT_MANAGER] Joining screen was created at " .. os.date())

	self.screen_collection_id = collection_id
	client_state:change_game_state(client_state.JOINING)

	joining_screen:set_state(self.screen_collection_id, "Matchmaking")

	-- Request matchmaking
	local nickname = client_state:get_nickname()
	local game_message = game_messages:request_matchmaking(nickname)
	send_command(self, json.encode(game_message))
end

local function match_screen_created(self, collection_id)
	local joining_time = socket.gettime() - self.started_at
	print(os.date() .. " [CLIENT_MANAGER] It takes " .. joining_time .. " seconds to join")
	
	print(os.date() .. " [CLIENT_MANAGER] Match screen was created at " .. os.date())
	
	self.screen_collection_id = collection_id
	client_state:change_game_state(client_state.IN_MATCH)
end

local function leaving_screen_created(self, collection_id)
	print(os.date() .. " [CLIENT_MANAGER] Leaving screen was created at " .. os.date())

	-- Leave request
	local game_message = game_messages:request_leave()
	send_message(self, json.encode(game_message))
	
	self.screen_collection_id = collection_id
	client_state:change_game_state(client_state.LEAVING)

	leaving_screen:set_state(self.screen_collection_id, "Leaving")
end

local function ops_screen_created(self, collection_id)
	print(os.date() .. " [CLIENT_MANAGER] Ops screen was created at " .. os.date())
end

function update(self, dt)
	if self.omginstance then
		self.omginstance:update(dt)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash(client_manager.START) then
		start(self)
		
	elseif message_id == hash(client_manager.JOIN) then
		local nickname = message.nickname
		join(self, nickname)

	elseif message_id == hash(client_manager.LEAVE) then
		leave(self)

	elseif message_id == hash(client_manager.SPAWN) then
		spawn(self)

	elseif message_id == hash(client_manager.MOVE) then
		local x = message.x
		local y = message.y
		move(self, x, y)

	elseif message_id == hash(client_manager.RESET) then
		reset(self)
		
	elseif message_id == hash(client_manager.SCREEN_CREATED) then
		local screen_qualifier = message.screen_qualifier
		local collection_id = message.collection_id
		
		if screen_qualifier == client_manager.AUTH_SCREEN then
			auth_screen_created(self, collection_id)
		elseif screen_qualifier == client_manager.LOBBY_SCREEN then
			lobby_screen_created(self, collection_id)
		elseif screen_qualifier == client_manager.JOINING_SCREEN then
			joining_screen_created(self, collection_id)
		elseif screen_qualifier == client_manager.MATCH_SCREEN then
			match_screen_created(self, collection_id)
		elseif screen_qualifier == client_manager.LEAVING_SCREEN then
			leaving_screen_created(self, collection_id)
		elseif screen_qualifier == client_manager.OPS_SCREEN then
			ops_screen_created(self, collection_id)
		else
			error("[CLIENT_MANAGER] Unknown screen qualifier was received, screen_qualifier=" .. tostring(screen_qualifier))
		end
		
	end
end