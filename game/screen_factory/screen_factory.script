local screen_factory = require("game.screen_factory.screen_factory")
local match_screen = require("game.match_screen.match_screen")
local lobby_screen = require("game.lobby_screen.lobby_screen")
local ops_screen = require("game.ops_screen.ops_screen")
local client_manager = require("game.client_manager.client_manager")

local AUTH_SCREEN_FACTORY = "#auth_screen_factory"
local LOBBY_SCREEN_FACTORY = "#lobby_screen_factory"
local MATCH_SCREEN_FACTORY = "#match_screen_factory"
local JOINING_SCREEN_FACTORY = "#joining_screen_factory"
local LEAVING_SCREEN_FACTORY = "#leaving_screen_factory"
local OPS_SCREEN_FACTORY = "#ops_screen_factory"

local function remove_current_screen(self)
	if self.current_screen_ids then
		for key, go_id in pairs(self.current_screen_ids) do
			go.delete(go_id)
		end

		self.current_screen_ids = nil
	end
end

local function create_game_screen(self, factory_id, screen_collection_url, screen_qualifier)
	print(os.date() .. " [SCREEN_FACTORY] Create screen, screen_qualifier=" .. screen_qualifier)

	remove_current_screen(self)

	local collection_ids = collectionfactory.create(factory_id)
	pprint(collection_ids)

	self.current_screen_ids = collection_ids

	local screen_manager_url = collection_ids[screen_collection_url]
	client_manager:screen_created(screen_qualifier, screen_manager_url)
	return screen_manager_url
end

local function create_auth_screen(self)
	create_game_screen(self, AUTH_SCREEN_FACTORY, "/auth_screen", screen_factory.AUTH_SCREEN)
end

local function create_lobby_screen(self, profile)
	local screen_manager_url = create_game_screen(self, LOBBY_SCREEN_FACTORY, "/lobby_screen", screen_factory.LOBBY_SCREEN)
	lobby_screen:setup_screen(screen_manager_url, profile)
end

local function create_match_screen(self, game_manager_url, settings, match_state, step_index)
	local screen_manager_url = create_game_screen(self, MATCH_SCREEN_FACTORY, "/match_screen", screen_factory.MATCH_SCREEN)
	match_screen:setup_screen(screen_manager_url, game_manager_url, settings, match_state, step_index)
end

local function create_joining_screen(self)
	create_game_screen(self, JOINING_SCREEN_FACTORY, "/joining_screen", screen_factory.JOINING_SCREEN)
end

local function create_leaving_screen(self)
	create_game_screen(self, LEAVING_SCREEN_FACTORY, "/leaving_screen", screen_factory.LEAVING_SCREEN)
end

local function create_ops_screen(self, reason)
	local screen_manager_url = create_game_screen(self, OPS_SCREEN_FACTORY, "/ops_screen", screen_factory.OPS_SCREEN)
	ops_screen:setup_screen(screen_manager_url, reason)
end

function on_message(self, message_id, message, sender)
	if message_id == hash(screen_factory.CREATE_AUTH_SCREEN) then
		create_auth_screen(self)
		
	elseif message_id == hash(screen_factory.CREATE_LOBBY_SCREEN) then
		local profile = message.profile
		create_lobby_screen(self, profile)
		
	elseif message_id == hash(screen_factory.CREATE_MATCH_SCREEN) then
		local game_manager_url = message.game_manager_url
		local settings = message.settings
		local match_state = message.match_state
		local step_index = message.step_index
		create_match_screen(self, game_manager_url, settings, match_state, step_index)

	elseif message_id == hash(screen_factory.CREATE_JOINING_SCREEN) then
		create_joining_screen(self)
		
	elseif message_id == hash(screen_factory.CREATE_LEAVING_SCREEN) then
		create_leaving_screen(self)

	elseif message_id == hash(screen_factory.CREATE_OPS_SCREEN) then
		local reason = message.reason
		create_ops_screen(self, reason)
		
	end
end
