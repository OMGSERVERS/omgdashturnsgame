local match_factory = require("game.match_factory.match_factory")
local death_match = require("game.death_match.death_match")

local DEATH_MATCH_FACTORY = "#death_match_factory"

local function remove_current_match(self)
	if self.current_match_ids then
		for key, go_id in pairs(self.current_match_ids) do
			go.delete(go_id)
		end

		self.current_match_ids = nil
	end
end

local function create_match(self, factory_id, match_collection_url, match_qualifier)
	print(os.date() .. " [MATCH_FACTORY] Create match, match_qualifier=" .. match_qualifier)

	remove_current_match(self)

	local collection_ids = collectionfactory.create(factory_id)
	pprint(collection_ids)

	self.current_match_ids = collection_ids

	local match_manager_url = collection_ids[match_collection_url]
	
	return match_manager_url
end

local function create_death_match(self, game_manager_url, settings, match_state, step_index)
	local match_manager_url = create_match(self, DEATH_MATCH_FACTORY, "/death_match", match_factory.DEATH_MATCH)
	death_match:setup_match(match_manager_url, game_manager_url, settings, match_state, step_index)
end

function on_message(self, message_id, message, sender)
	if message_id == hash(match_factory.CREATE_DEATH_MATCH) then
		local game_manager_url = message.game_manager_url
		local settings = message.settings
		local match_state = message.match_state
		local step_index = message.step_index
		create_death_match(self, game_manager_url, settings, match_state, step_index)
	end
end
