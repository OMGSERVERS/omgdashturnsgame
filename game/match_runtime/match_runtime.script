local match_factory = require("game.match_factory.match_factory")
local match_runtime = require("game.match_runtime.match_runtime")
local match_manager = require("game.match_manager.match_manager")
local game_manager = require("game.game_manager.game_manager")
local omgruntime = require("omgservers.omgruntime.omgruntime")
local server_messages = require("common.server_messages")
local match_requests = require("common.match_requests")
local game_messages = require("common.game_messages")

local function setup_runtime(self)
	self.simulator_enabled = true
end

local function simulate_step(self)
	local step_index = self.step_index + 1
	self.step_index = step_index
	print(os.date() .. " [MATCH_RUNTIME] Simulate step, step=" .. step_index)

	match_manager:simulate_step(self.match_manager_url, self.simulator_requests)
	
	self.simulator_requests = {}
end

local function match_simulated(self, match_state, step_events)
	print(os.date() .. " [MATCH_RUNTIME] Match was simulated, step=" .. self.step_index)
	
	self.match_state = match_state
	self.step_events = step_events

	local server_message = server_messages:play_events(step_events)
	omgruntime:broadcast_binary_message(json.encode(server_message))
end

function init(self)
	self.simulator_enabled = false
	self.simulator_requests = {}
	self.simulator_events = {}
	self.match_module = nil
	self.match_manager_url = nil
	self.match_timer = 0;
	self.match_state = nil
	self.match_finished = false
	self.step_index = 0
	self.step_timer = 0
	self.step_events = nil
end

function update(self, dt)
	if not self.simulator_enabled then
		return
	end
	
	self.match_timer = self.match_timer + dt
	if self.match_timer > match_runtime.MATCH_LIFEIMTE then
		if not self.match_finished then
			self.match_finished = true
			print(os.date() .. " [MATCH_RUNTIME] Match was finished")
			omgruntime:stop_matchmaking()
		end
	end

	self.step_timer = self.step_timer + dt
	if self.step_timer > match_runtime.STEP_INTERVAL then
		self.step_timer = 0

		simulate_step(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash(match_runtime.SETUP_RUNTIME) then
		setup_runtime(self)
	elseif message_id == hash(match_runtime.COMMAND_RECEIVED) then
		local command_qualifier = message.command_qualifier
		local command_body = message.command_body
		
		if command_qualifier == omgruntime.constants.INIT_RUNTIME then
			local version_config = command_body.runtime_config.version_config

			print(os.date() .. " [MATCH_RUNTIME] Init runtime")
			pprint(version_config)
			self.version_config = version_config

			local game_manager_url = msg.url()
			match_factory:create_death_match(game_manager_url, {}, nil, 0)
			
		elseif command_qualifier == omgruntime.constants.ADD_MATCH_CLIENT then
			local client_id = command_body.client_id
			local profile = command_body.profile

			print(os.date() .. " [MATCH_RUNTIME] Add match client, client_id=" .. client_id)
			pprint(profile)

			-- Makes client to use websockets
			omgruntime:upgrade_connection(client_id)

			local request = match_requests:add_client(client_id, profile.data.nickname, 0)
			self.simulator_requests[#self.simulator_requests + 1] = request
			
		elseif command_qualifier == omgruntime.constants.DELETE_CLIENT then
			local client_id = command_body.client_id
			
			print(os.date() .. " [MATCH_RUNTIME] Delete client, client_id=" .. client_id)

			local request = match_requests:delete_client(client_id)
			self.simulator_requests[#self.simulator_requests + 1] = request
			
		else
			print(os.date() .. " [MATCH_RUNTIME] Unknown command qualifier was received, command_qualifier=" .. tostring(command_qualifier))
			
		end
		
	elseif message_id == hash(match_runtime.MESSAGE_RECEIVED) then
		local client_id = message.client_id
		local game_message = message.message
		local message_qualifier = game_message.qualifier

		if message_qualifier == game_messages.REQUEST_STATE then
			print(os.date() .. " [MATCH_RUNTIME] Request state, client_id=" .. client_id)

			local server_message = server_messages:set_state({}, self.match_state, self.step_index)
			omgruntime:respond_binary_message(client_id, json.encode(server_message))

		elseif message_qualifier == game_messages.REQUEST_LEAVE then
			print(os.date() .. " [MATCH_RUNTIME] Request leave, client_id=" .. client_id)
			omgruntime:kick_client(client_id)
			
		elseif message_qualifier == game_messages.REQUEST_SPAWN then
			print(os.date() .. " [MATCH_RUNTIME] Request spawn, client_id=" .. client_id)

			local request = match_requests:spawn_player(client_id)
			self.simulator_requests[#self.simulator_requests + 1] = request

		elseif message_qualifier == game_messages.REQUEST_MOVE then
			local x = game_message.x
			local y = game_message.y
			
			print(os.date() .. " [MATCH_RUNTIME] Request move, client_id=" .. client_id)
			local request = match_requests:move_player(client_id, x, y)
			self.simulator_requests[#self.simulator_requests + 1] = request
			
		else
			print(os.date() .. " [MATCH_RUNTIME] Unknown message qualifier was received, message_qualifier=" .. tostring(message_qualifier))
			
		end
	end
		
	if message_id == hash(game_manager.MATCH_CREATED) then
		local match_qualifier = message.match_qualifier
		local match_manager_url = message.match_manager_url

		print(os.date() .. " [MATCH_RUNTIME] Match was created, match_qualifier=" .. match_qualifier)
		self.match_qualifier = match_qualifier
		self.match_manager_url = match_manager_url

		simulate_step(self)
	elseif message_id == hash(game_manager.MATCH_SIMULATED) then
		local match_state = message.match_state
		local step_events = message.step_events

		match_simulated(self, match_state, step_events)
	end
end