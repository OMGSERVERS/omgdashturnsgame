local match_factory = require("game.match_factory.match_factory")
local player_factory = require("game.player_factory.player_factory")
local match_manager = require("game.match_manager.match_manager")
local match_player = require("game.match_player.match_player")
local game_manager = require("game.game_manager.game_manager")
local death_match = require("game.death_match.death_match")
local match_requests = require("common.match_requests")
local match_events = require("common.match_events")

local PLAYER_FACTORY = "player_factory#player_factory"
local FOREST_TILEMAP = "forest_level#forest_tilemap"

local function add_client(self, client_id, nickname, score)
	print(os.date() .. " [DEATH_MATCH] Add client, client_id=" .. tostring(client_id) .. ", nickname=" .. tostring(nickname))
	self.clients[client_id] = {
		nickname = nickname,
		score = score,
	}
	
	match_manager:client_added("#", client_id, nickname, score)
end

local function create_player(self, client_id, x, y)
	local client = self.clients[client_id]
	if client then
		print(os.date() .. " [MATCH_MANAGER] Create player, client_id=" .. client_id)
		
		local z = y
		local position = vmath.vector3(x, y, z)
		local nickname = client.nickname
		player_factory:create_player(PLAYER_FACTORY, client_id, position, nickname)
	end
end

local function move_player(self, client_id, x, y)
	local player = self.players[client_id]
	if player then
		print(os.date() .. " [MATCH_MANAGER] Move player, client_id=" .. client_id .. ", x=" .. x .. ", y=" .. y)

		local match_player_url = player.url
		match_player:move_player(match_player_url, x, y)
	else
		print(os.date() .. " [MATCH_MANAGER] Player was not found to move, client_id=" .. client_id)
	end
end

local function delete_player(self, client_id)
	player_factory:delete_player(PLAYER_FACTORY, client_id)
end

local function delete_client(self, client_id)
	delete_player(self, client_id)

	match_manager:client_deleted("#", client_id)
end

local function setup_match(self, game_manager_url, settings, match_state, step_index)
	print(os.date() .. " [DEATH_MATCH] Setup match")

	self.match_manager_url = msg.url()
	
	player_factory:setup_factory(PLAYER_FACTORY, self.match_manager_url)
	
	if match_state then
		pprint(match_state)

		local clients = match_state.clients
		for client_id, client in pairs(clients) do
			local nickname = client.nickname
			local score = client.score
			add_client(self, client_id, nickname, score)
		end

		local players = match_state.players
		for client_id, player in pairs(players) do
			local x = player.x
			local y = player.y
			create_player(self, client_id, x, y)
		end
	end

	local match_qualifier = match_factory.DEATH_MATCH
	game_manager:match_created(game_manager_url, match_qualifier, self.match_manager_url)
	
	self.game_manager_url = game_manager_url
end

local function match_simulated(self)
	print(os.date() .. " [DEATH_MATCH] Match simualted, produced " .. #self.events .. " events")
	local match_state = {
		clients = self.clients,
		players = self.players,
	}
	game_manager:match_simulated(self.game_manager_url, match_state, self.events)
end

local function simulate_step(self, requests)
	print(os.date() .. " [DEATH_MATCH] Simulate step, " .. #requests .. " requests")
	
	self.requests = 0
	self.events = {}
	
	for request_index = 1,#requests do
		local request = requests[request_index]
		local qualifier = request.qualifier
		
		if qualifier == match_requests.ADD_CLIENT then
			local client_id = request.client_id
			local nickname = request.nickname
			local score = request.score
			add_client(self, client_id, nickname, score)
			
		elseif qualifier == match_requests.SPAWN_PLAYER then
			local client_id = request.client_id

			local x, y, w, h = tilemap.get_bounds(FOREST_TILEMAP)
			local spawn_x = math.random(0, w * 16) 
			local spawn_y = math.random(0, h * 16)
			create_player(self, client_id, spawn_x, spawn_y)

			self.requests = self.requests + 1
			
		elseif qualifier == match_requests.MOVE_PLAYER then
			local client_id = request.client_id
			local x = request.x
			local y = request.y
			move_player(self, client_id, x, y)

			self.requests = self.requests + 1
			
		elseif qualifier == match_requests.DELETE_PLAYER then
			local client_id = request.client_id
			delete_player(self, client_id)

			self.requests = self.requests + 1
			
		elseif qualifier == match_requests.DELETE_CLIENT then
			local client_id = request.client_id
			delete_client(self, client_id)
		end
	end

	if self.requests == 0 then
		match_simulated(self)
	end
end

local function play_events(self, events)
	self.requests = 0
	self.events = {}
	
	for event_index = 1,#events do
		local event = events[event_index]
		local qualifier = event.qualifier

		if qualifier == match_events.CLIENT_ADDED then
			local client_id = event.client_id
			local nickname = event.nickname
			local score = event.score
			add_client(self, client_id, nickname, score)

		elseif qualifier == match_events.PLAYER_CREATED then
			local client_id = event.client_id
			local x = event.x
			local y = event.y
			create_player(self, client_id, x, y)

		elseif qualifier == match_events.PLAYER_MOVED then
			local client_id = event.client_id
			local x = event.x
			local y = event.y
			move_player(self, client_id, x, y)

		elseif qualifier == match_events.PLAYER_KILLED then
			local client_id = event.client_id
			local killer_id = event.killer_id

			delete_player(self, client_id)
			
			local killer = self.clients[killer_id]
			if killer then
				killer.score = killer.score + 1
			end

		elseif qualifier == match_events.CLIENT_DELETED then
			local client_id = event.client_id
			delete_client(self, client_id)
		end
	end
end

function init(self)
	print(os.date() .. " [DEATH_MATCH] Initialized")
	
	self.clients = {}
	self.players = {}
	self.requests = 0
	self.events = {}
end

function on_message(self, message_id, message, sender)
	if message_id == hash(death_match.SETUP_MATCH) then
		local game_manager_url = message.game_manager_url
		local settings = message.settings
		local match_state = message.match_state
		local step_index = message.step_index
		setup_match(self, game_manager_url, settings, match_state, step_index)
	end

	if message_id == hash(match_manager.SIMULATE_STEP) then
		local requests = message.requests
		simulate_step(self, requests)
		
	elseif message_id == hash(match_manager.PLAY_EVENTS) then
		local events = message.events
		play_events(self, events)
	end

	local callback = false
	if message_id == hash(match_manager.CLIENT_ADDED) then
		local client_id = message.client_id
		local nickname = message.nickname
		local score = message.score
		print(os.date() .. " [DEATH_MATCH] Client was added, client_id=" .. client_id)
		
		local event = match_events:client_added(client_id, nickname, score)
		self.events[#self.events + 1] = event

		callback = true
		
	elseif message_id == hash(match_manager.PLAYER_CREATED) then
		local client_id = message.client_id
		local match_player_url = message.match_player_url
		local x = message.x
		local y = message.y
		print(os.date() .. " [DEATH_MATCH] Player was created, client_id=" .. client_id)

		self.players[client_id] = {
			url = match_player_url,
			x = x,
			y = y
		}
		
		local event = match_events:player_created(client_id, x, y)
		self.events[#self.events + 1] = event
		
		callback = true
		
	elseif message_id == hash(match_manager.PLAYER_MOVED) then
		local client_id = message.client_id
		local x = message.x
		local y = message.y
		print(os.date() .. " [DEATH_MATCH] Player was moved, client_id=" .. client_id)

		local player = self.players[client_id]
		if player then
			player.x = x
			player.y = y
		end

		local event = match_events:player_moved(client_id, x, y)
		self.events[#self.events + 1] = event
		
		callback = true

	elseif message_id == hash(match_manager.PLAYER_DEAD) then
		local client_id = message.client_id
		print(os.date() .. " [DEATH_MATCH] Player is dead, client_id=" .. client_id)
		
		callback = true
		
	elseif message_id == hash(match_manager.PLAYER_DELETED) then
		local client_id = message.client_id
		print(os.date() .. " [DEATH_MATCH] Player was deleted, client_id=" .. client_id)
		
		self.players[client_id] = nil

		callback = true

	elseif message_id == hash(match_manager.CLIENT_DELETED) then
		local client_id = message.client_id
		print(os.date() .. " [DEATH_MATCH] Client was deleted, client_id=" .. client_id)

		local event = match_events:client_deleted(client_id)
		self.events[#self.events + 1] = event
		
		self.clients[client_id] = nil
		
		callback = true
	end

	if callback then
		self.requests = self.requests - 1
		if self.requests == 0 then
			match_simulated(self)
		end
	end
end
